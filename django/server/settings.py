"""
Django Settings.
Generated by 'django-admin startproject' using Django 2.1.5.

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from decouple import config
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", "=%%l)@)$)h71u@o$w9drv(!w!f)7crm1e6yorx!0k6@ktzti!d")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", False, cast=bool)

# Base url for frontend sever. USED FOR EMAIL LINKS
FRONTEND_URL = config("FRONTEND_URL", "http://localhost")
BACKEND_URL = config("BACKEND_URL", "http://localhost:8080")

# List of (Name, Email) system administrators
ADMINS = []

# List of (Name, Email) system managers
MANAGERS = []

# CORS setup
if DEBUG:
    print("DEBUG Mode enabled")
    print("CORS allow all domains")
    ALLOWED_HOSTS = ["*"]
    CORS_ORIGIN_ALLOW_ALL = True
else:
    CORS_ORIGIN_WHITELIST = [config("CORS_ORIGIN", "")]
    ALLOWED_HOSTS = [config("ALLOWED_HOST", "")]

# This allows the browser to send COOKIES in the requests to the server
CORS_ALLOW_CREDENTIALS = True

# This forces HTTPS on REST_FRAMEWORK links
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "backend",
    "upload",
    "corsheaders",
    "rest_framework",
    "rest_framework.authtoken",
    "django_filters",
]

# Custom User Model from Backend App
AUTH_USER_MODEL = "backend.User"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "backend/templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "server.wsgi.application"

# File Upload App
UPLOAD_SERVER = config("UPLOAD_SERVER", "")
UPLOAD_URL = config("UPLOAD_URL", "")

# Email Settings
EMAIL_HOST = config("EMAIL_HOST", None)

if EMAIL_HOST:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_USE_TLS = config("EMAIL_USE_TLS", True, cast=bool)
    EMAIL_PORT = config("EMAIL_PORT", cast=int)
    EMAIL_HOST_USER = config("EMAIL_HOST_USER", "")
    EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", "")
    EMAIL_FROM = "Inspires Platform <%s>" % EMAIL_HOST_USER

# Django REST Framework

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_PERMISSION_CLASSES": ["backend.permissions.CustomPermissionSet"],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
}


# Cache
# https://docs.djangoproject.com/en/2.2/topics/cache/#dummy-caching-for-development

CACHE_REDIS = config("CACHE_REDIS", False, cast=bool)
if CACHE_REDIS:
    CACHE_REDIS_HOST = config("CACHE_REDIS_HOST", "redis")
    CACHE_REDIS_DB = config("CACHE_REDIS_DB", "1")
    # Redis Cache
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://%s:6379/%s" % (CACHE_REDIS_HOST, CACHE_REDIS_DB),
            "TIMEOUT": 60 * 60 * 24,  # Cache only expires daily
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "PASSWORD": "1N5P1R3S_C4CH3"
                # "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
            },
        }
    }
else:
    # Dummy cache
    CACHES = {"default": {"BACKEND": "django.core.cache.backends.dummy.DummyCache"}}


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

if config("DB_SQLITE", False, cast=bool):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "django",  # database name
            "USER": "postgres",
            "PASSWORD": "postgres",
            "HOST": config("DB_HOST", "db"),  # set in docker-compose.yml
            "PORT": 5432,  # default postgres port
        }
    }

# FIXTURE_DIRS = [os.path.join(BASE_DIR, "backend", "fixtures")]
FIXTURE_DIRS = []

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGES = [
    ("en", _("English")),
    ("es", _("Spanish")),
    ("de", _("German")),
    ("nl", _("Dutch")),
    ("ca", _("Catalan")),
    ("it", _("Italian")),
    ("fr", _("French")),
]
LANGUAGE_CODE = "en"
LANGUAGE_COOKIE_NAME = "lang"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

# Pregenerated URL for static files
STATIC_URL = config("STATIC_URL", "/static/")

# Where to compile static files
STATIC_ROOT = "/static/static/"

# STATIC_ROOT = config("STATIC_ROOT", "/static/static")
# STATIC_ROOT = (
#     STATIC_ROOT if STATIC_ROOT[0] == "/" else os.path.join(BASE_DIR, STATIC_ROOT)
# )
