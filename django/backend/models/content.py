from django.db import models
from django.template.defaultfilters import slugify
from django.contrib.contenttypes.fields import GenericRelation

from backend.models import TrackableModel

import romanize3

TYPE_BLOG = "BLOG"
TYPE_NEWS = "NEWS"
TYPE_HELP = "HELP"

TYPE_CHOICES = [
    (TYPE_HELP, "Help Article"),
    (TYPE_NEWS, "News Article"),
    (TYPE_BLOG, "Blog Post"),
]

LANGUAGES = [
    ("ar", "Arabic"),
    ("ca", "Catalan"),
    ("en", "English"),
    ("es", "Spanish"),
    ("fr", "French"),
    ("hu", "Hungarian"),
    ("it", "Italian"),
    ("nl", "Dutch"),
    ("pt", "Portuguese"),
]


class ContentMaster(TrackableModel):
    type = models.CharField(max_length=64, choices=TYPE_CHOICES)
    sorting = models.PositiveIntegerField(
        default=1,
        help_text="Sorting priority of this content. Lower numbers will be shown first.",
    )
    name = models.CharField(
        max_length=512,
        unique=True,
        help_text="Internal use only. Create a name that identifies the content you will create.",
    )

    def __str__(self):
        return f"{self.type} - {self.name}"

    class Meta:
        ordering = ["sorting"]


class Content(TrackableModel):
    master = models.ForeignKey(ContentMaster, on_delete=models.CASCADE)

    topic = models.CharField(
        max_length=64,
        help_text="Define what this Article is about. Use single words and re-use them across articles.",
    )
    title = models.CharField(
        max_length=512,
        help_text="Article title. Will be used for the URL slug (i.e. '/help/article-slug') So write something useful and concise.",
    )
    slug = models.SlugField(unique=True, blank=True, help_text="Autogenerated.")
    summary = models.TextField(max_length=1024)
    body = models.TextField(help_text="Full MarkDown enabled.")
    locale = models.CharField(max_length=5, choices=LANGUAGES)
    published = models.BooleanField(
        default=False, help_text="Check this box if the article is ready to be public."
    )

    attachments = GenericRelation("Attachment")

    class Meta:
        unique_together = ("master", "locale")

    @property
    def sorting(self):
        return self.master.sorting

    def type(self):
        return self.master.type

    def __str__(self):
        return f"{self.master.type} - {self.title}"

    def save(self, *args, **kwargs):
        # TODO: change slug on all saves? might avoid _weird_ slugs
        # if not self.slug:
        if self.locale == "ar":
            romanized_title = romanize3.ara.convert(self.title)
            self.slug = slugify(romanized_title)
        else:
            self.slug = slugify(self.title)

        return super().save(*args, **kwargs)
